{"version":3,"sources":["store/loading.ts","store/currentTodo.ts","store/index.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.tsx","Types/TodosFilter.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","type","loadingReducer","state","action","todoActions","todo","payload","currentTodoReducer","rootReducer","combineReducers","isTodosLoading","currentTodo","selectors","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","props","todos","dispatch","useDispatch","selectedTodo","useSelector","className","map","id","completed","cn","title","onClick","TodoFilter","React","memo","filteredBy","setFilteredBy","searchQuery","setSearchQuery","onSubmit","event","preventDefault","value","onChange","target","placeholder","style","pointerEvents","length","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodosFilter","TodoModal","useState","user","setUser","useEffect","userId","userFromServer","href","email","name","App","loading","setTodos","DEFAULT","console","log","getState","todosFromServer","finally","preparedTodos","filter","task","ACTIVE","COMPLETED","includes","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.629a366e.chunk.js","sourcesContent":["type StartLoadingAction = {\n  type: 'START_LOADING',\n};\n\ntype FinishLoadingAction = {\n  type: 'FINISH_LOADING',\n};\n\ntype Action = (\n  StartLoadingAction\n  | FinishLoadingAction\n);\n\ntype RootState = boolean;\n\nconst initialState: RootState = false;\n\nconst loadingReducer = (state = initialState, action: Action): RootState => {\n  switch (action.type) {\n    case 'START_LOADING':\n      return true;\n\n    case 'FINISH_LOADING':\n      return false;\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  startLoading: (): StartLoadingAction => ({\n    type: 'START_LOADING',\n  }),\n\n  finishLoading: (): FinishLoadingAction => ({\n    type: 'FINISH_LOADING',\n  }),\n};\n\nexport default loadingReducer;\n","import { Todo } from '../Types/Todo';\n\ntype RootState = Todo | null;\n\ntype SelectTask = {\n  type: 'SelectTask',\n  payload: Todo,\n};\n\ntype RemoveTask = {\n  type: 'RemoveTask'\n};\n\ntype Action = RemoveTask | SelectTask;\n\nexport const todoActions = {\n  SelectTask: (todo: Todo) => ({ type: 'SelectTask', payload: todo }),\n  RemoveTask: { type: 'RemoveTask' },\n};\n\nconst initialState: RootState = null;\n\nconst currentTodoReducer = (\n  state = initialState,\n  action: Action,\n): RootState => {\n  switch (action.type) {\n    case 'SelectTask':\n      return action.payload;\n\n    case 'RemoveTask':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport loadingReducer from './loading';\nimport currentTodoReducer from './currentTodo';\nimport { Todo } from '../Types/Todo';\n\nconst rootReducer = combineReducers({\n  isTodosLoading: loadingReducer,\n  currentTodo: currentTodoReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\n// Selectors receive RootState from the `useSelector` hook and return required data\nexport const selectors = {\n  isLoading: (state: RootState): boolean => state.isTodosLoading,\n  selectedTodo: (state: RootState): Todo => state.currentTodo,\n};\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n","import React from 'react';\nimport cn from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Todo } from '../../Types/Todo';\nimport { todoActions } from '../../store/currentTodo';\nimport { selectors } from '../../store';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const { todos } = props;\n\n  const dispatch = useDispatch();\n  const selectedTodo = useSelector(selectors.selectedTodo);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            className=\"\"\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            {todo.completed ? (\n              <td className=\"is-vcentered\">\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </td>\n            ) : (\n              <td className=\"is-vcentered\" />\n            )}\n\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={cn({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => {\n                  dispatch(todoActions.SelectTask(todo));\n                }}\n              >\n                <span className=\"icon\">\n                  {selectedTodo && todo.id === selectedTodo.id ? (\n                    <i className=\"far fa-eye-slash\" />\n                  ) : (\n                    <i className=\"far fa-eye\" />\n                  )}\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { TodosFilter } from '../../Types/TodosFilter';\n\ninterface Props {\n  filteredBy: TodosFilter,\n  setFilteredBy: CallableFunction,\n  searchQuery: string,\n  setSearchQuery: CallableFunction,\n}\n\nexport const TodoFilter: React.FC<Props> = React.memo((props) => {\n  const {\n    filteredBy,\n    setFilteredBy,\n    searchQuery,\n    setSearchQuery,\n  } = props;\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={(event) => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filteredBy}\n            onChange={(event) => {\n              setFilteredBy(event.target.value);\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchQuery}\n          onChange={(event) => setSearchQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {searchQuery.length > 0 && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setSearchQuery('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './Types/Todo';\nimport { User } from './Types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum TodosFilter {\n  DEFAULT = 'all',\n  COMPLETED = 'completed',\n  ACTIVE = 'active',\n}\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { User } from '../../Types/User';\nimport { getUser } from '../../api';\nimport { Todo } from '../../Types/Todo';\nimport { selectors } from '../../store';\nimport { todoActions } from '../../store/currentTodo';\n\ninterface Props {\n  todo: Todo,\n}\n\nexport const TodoModal: React.FC<Props> = (props) => {\n  const { todo } = props;\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(todo.userId).then(userFromServer => setUser(userFromServer));\n  }, []);\n\n  const dispatch = useDispatch();\n  const selectedTodo = useSelector(selectors.selectedTodo);\n\n  return (\n    <div\n      className=\"modal is-active\"\n      data-cy=\"modal\"\n    >\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                dispatch(todoActions.RemoveTask);\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './index.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './Types/Todo';\nimport { TodosFilter } from './Types/TodosFilter';\nimport { selectors, store } from './store';\nimport { actions } from './store/loading';\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const loading = useSelector(selectors.isLoading);\n  const selectedTodo = useSelector(selectors.selectedTodo);\n\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filteredBy, setFilteredBy]\n    = useState<TodosFilter>(TodosFilter.DEFAULT);\n\n  useEffect(() => {\n    dispatch(actions.startLoading());\n    // eslint-disable-next-line no-console\n    console.log(store.getState());\n    getTodos()\n      .then((todosFromServer) => {\n        setTodos(todosFromServer);\n      })\n      .finally(() => {\n        dispatch(actions.finishLoading());\n        // eslint-disable-next-line no-console\n        console.log(store.getState());\n      });\n  }, []);\n\n  const prepareTasks = () => {\n    return todos\n      .filter(task => {\n        if (filteredBy === TodosFilter.ACTIVE) {\n          return !task.completed;\n        }\n\n        if (filteredBy === TodosFilter.COMPLETED) {\n          return task.completed;\n        }\n\n        return task;\n      })\n      .filter(task => {\n        return task.title.includes(searchQuery);\n      });\n  };\n\n  const preparedTodos = prepareTasks();\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filteredBy={filteredBy}\n                setFilteredBy={setFilteredBy}\n                searchQuery={searchQuery}\n                setSearchQuery={setSearchQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {loading\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={preparedTodos}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}