{"version":3,"sources":["store/loading.ts","store/currentTodo.ts","store/todos.ts","store/filter.ts","store/user.ts","store/index.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.tsx","Types/TodosFilter.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","type","loadingReducer","state","action","todoActions","todo","payload","currentTodoReducer","todosActions","todos","todosReducer","filterActions","status","query","initialState","filterReducer","userActions","user","userReducer","rootReducer","combineReducers","isTodosLoading","currentTodo","todosList","filterTodos","currentTodoUser","selectors","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","props","dispatch","useDispatch","selectedTodo","useSelector","className","map","id","completed","cn","title","onClick","TodoFilter","React","memo","todosFilter","onSubmit","event","preventDefault","value","onChange","target","placeholder","style","pointerEvents","length","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodosFilter","TodoModal","selectedUser","useEffect","userId","userFromServer","href","email","name","App","loading","todosFromSever","console","log","getState","todosFromServer","finally","preparedTodos","filter","task","ACTIVE","COMPLETED","includes","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.78e158de.chunk.js","sourcesContent":["type StartLoadingAction = {\n  type: 'loading/startLoading',\n};\n\ntype FinishLoadingAction = {\n  type: 'loading/endLoading',\n};\n\ntype Action = (\n  StartLoadingAction\n  | FinishLoadingAction\n);\n\ntype RootState = boolean;\n\nconst loadingReducer = (state = false, action: Action): RootState => {\n  switch (action.type) {\n    case 'loading/startLoading':\n      return true;\n\n    case 'loading/endLoading':\n      return false;\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  startLoading: (): StartLoadingAction => ({\n    type: 'loading/startLoading',\n  }),\n\n  finishLoading: (): FinishLoadingAction => ({\n    type: 'loading/endLoading',\n  }),\n};\n\nexport default loadingReducer;\n","import { Todo } from '../Types/Todo';\n\ntype RootState = Todo | null;\n\ntype SelectTask = {\n  type: 'currentTodo/SelectTask',\n  payload: Todo,\n};\n\ntype RemoveTask = {\n  type: 'currentTodo/RemoveTask'\n};\n\ntype Action = RemoveTask | SelectTask;\n\nexport const todoActions = {\n  SelectTask: (todo: Todo) => (\n    {\n      type: 'currentTodo/SelectTask',\n      payload: todo,\n    }),\n  RemoveTask: () => ({ type: 'currentTodo/RemoveTask' }),\n};\n\nconst initialState: RootState = null;\n\nconst currentTodoReducer = (\n  state = initialState,\n  action: Action,\n): RootState => {\n  switch (action.type) {\n    case 'currentTodo/SelectTask':\n      return action.payload;\n\n    case 'currentTodo/RemoveTask':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Todo } from '../Types/Todo';\n\ntype RootState = Todo[] | [];\n\ntype SetTodos = {\n  type: 'todos/SetTodos',\n  payload: Todo[],\n};\n\ntype Action = SetTodos;\n\nexport const todosActions = {\n  SetTodos: (todos: Todo[]) => ({ type: 'todos/SetTodos', payload: todos }),\n};\n\nconst todosReducer = (state:RootState = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/SetTodos':\n      return [...action.payload];\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","type RootState = {\n  query: string,\n  status: string,\n};\n\ntype SetStatus = {\n  type: 'filter/SetStatus',\n  payload: {\n    status: string,\n  }\n};\n\ntype SetQuery = {\n  type: 'filter/SetQuery',\n  payload: {\n    query: string\n  }\n};\n\ntype Action = SetStatus | SetQuery;\n\nexport const filterActions = {\n  SetStatus: (status: string) => ({\n    type: 'filter/SetStatus',\n    payload: {\n      status,\n    },\n  }),\n  SetQuery: (query: string) => (\n    {\n      type: 'filter/SetQuery',\n      payload: {\n        query,\n      },\n    }\n  ),\n};\n\nconst initialState: RootState = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case 'filter/SetStatus':\n      return {\n        ...state,\n        ...action.payload,\n      };\n\n    case 'filter/SetQuery':\n      return {\n        ...state,\n        ...action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { User } from '../Types/User';\n\ntype RootState = User | null;\n\ntype SetUser = {\n  type: 'user/SetUser',\n  payload: User,\n};\n\ntype RemoveUser = {\n  type: 'user/RemoveUser',\n};\n\ntype Action = SetUser | RemoveUser;\n\nexport const userActions = {\n  SetUser: (user: User) => ({ type: 'user/SetUser', payload: user }),\n  RemoveUser: () => ({ type: 'user/RemoveUser' }),\n};\n\nconst userReducer = (state:RootState = null, action: Action): RootState => {\n  switch (action.type) {\n    case 'user/SetUser':\n      return action.payload;\n\n    case 'user/RemoveUser':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport loadingReducer from './loading';\nimport currentTodoReducer from './currentTodo';\nimport { Todo } from '../Types/Todo';\nimport todosReducer from './todos';\nimport filterReducer from './filter';\nimport userReducer from './user';\n\nconst rootReducer = combineReducers({\n  isTodosLoading: loadingReducer,\n  currentTodo: currentTodoReducer,\n  todosList: todosReducer,\n  filterTodos: filterReducer,\n  currentTodoUser: userReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\n// Selectors receive RootState from the `useSelector` hook and return required data\nexport const selectors = {\n  isLoading: (state: RootState): boolean => state.isTodosLoading,\n  selectedTodo: (state: RootState): Todo => state.currentTodo,\n  todosList: (state: RootState): Todo[] => state.todosList,\n  filterTodos: (state: RootState) => state.filterTodos,\n  currentTodoUser: (state: RootState) => state.currentTodoUser,\n};\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n","import React from 'react';\nimport cn from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Todo } from '../../Types/Todo';\nimport { todoActions } from '../../store/currentTodo';\nimport { selectors } from '../../store';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const { todos } = props;\n\n  const dispatch = useDispatch();\n  const selectedTodo = useSelector(selectors.selectedTodo);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            className=\"\"\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            {todo.completed ? (\n              <td className=\"is-vcentered\">\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </td>\n            ) : (\n              <td className=\"is-vcentered\" />\n            )}\n\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={cn({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => {\n                  dispatch(todoActions.SelectTask(todo));\n                }}\n              >\n                <span className=\"icon\">\n                  {selectedTodo && todo.id === selectedTodo.id ? (\n                    <i className=\"far fa-eye-slash\" />\n                  ) : (\n                    <i className=\"far fa-eye\" />\n                  )}\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterActions } from '../../store/filter';\nimport { selectors } from '../../store';\n\nexport const TodoFilter: React.FC = React.memo(() => {\n  const dispatch = useDispatch();\n  const todosFilter = useSelector(selectors.filterTodos);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={(event) => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={todosFilter.status}\n            onChange={(event) => {\n              dispatch(filterActions.SetStatus(event.target.value));\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={todosFilter.query}\n          onChange={(event) => {\n            dispatch(filterActions.SetQuery(event.target.value));\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {todosFilter.query.length > 0 && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(filterActions.SetQuery(''))}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './Types/Todo';\nimport { User } from './Types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum TodosFilter {\n  DEFAULT = 'all',\n  COMPLETED = 'completed',\n  ACTIVE = 'active',\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { selectors } from '../../store';\nimport { todoActions } from '../../store/currentTodo';\nimport { userActions } from '../../store/user';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useDispatch();\n  const selectedTodo = useSelector(selectors.selectedTodo);\n  const selectedUser = useSelector(selectors.currentTodoUser);\n\n  useEffect(() => {\n    getUser(selectedTodo.userId).then(userFromServer => {\n      dispatch(userActions.SetUser(userFromServer));\n    });\n  }, []);\n\n  return (\n    <div\n      className=\"modal is-active\"\n      data-cy=\"modal\"\n    >\n      <div className=\"modal-background\" />\n\n      {!selectedUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                dispatch(userActions.RemoveUser());\n                dispatch(todoActions.RemoveTask());\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              <a href={`mailto:${selectedUser.email}`}>\n                {selectedUser.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport './index.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { TodosFilter } from './Types/TodosFilter';\nimport { selectors, store } from './store';\nimport { actions } from './store/loading';\nimport { todosActions } from './store/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const loading = useSelector(selectors.isLoading);\n  const selectedTodo = useSelector(selectors.selectedTodo);\n  const todosFromSever = useSelector(selectors.todosList);\n  const todosFilter = useSelector(selectors.filterTodos);\n\n  useEffect(() => {\n    dispatch(actions.startLoading());\n    // eslint-disable-next-line no-console\n    console.log(store.getState());\n    getTodos()\n      .then((todosFromServer) => {\n        dispatch(todosActions.SetTodos(todosFromServer));\n      })\n      .finally(() => {\n        dispatch(actions.finishLoading());\n        // eslint-disable-next-line no-console\n        console.log(store.getState());\n      });\n  }, []);\n\n  const prepareTasks = () => {\n    return todosFromSever\n      .filter(task => {\n        if (todosFilter.status === TodosFilter.ACTIVE) {\n          return !task.completed;\n        }\n\n        if (todosFilter.status === TodosFilter.COMPLETED) {\n          return task.completed;\n        }\n\n        return task;\n      })\n      .filter(task => {\n        return task.title.includes(todosFilter.query);\n      });\n  };\n\n  const preparedTodos = prepareTasks();\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {loading\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={preparedTodos}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}